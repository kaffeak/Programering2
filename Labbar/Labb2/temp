defmodule Test do

  @type literal() :: {:const, number()}
                  | {:const, atom()}
                  | {:var, atom()}
  @type expr() :: {:add, expr(), expr()}
                  | {:mul, expr(), expr()}
                  | {:exp, expr(), expr()}
                  | {:ln, expr()}
                  | {:sin, expr()}
                  | literal()

  def deriv({:const, _}, _), do: {:const, 0}
  def deriv({:var, v}, v), do: {:const, 1}
  def deriv({:var, y}, _), do: {:const, 0}
  def deriv({:mul, e1, e2}, v), do: simplify({:add, {:mul, deriv(e1, v), e2}, {:mul, e1, deriv(e2, v)}})
  def deriv({:add, e1, e2}, v), do: simplify({:add, deriv(e1, v), deriv(e2, v)})
  def deriv({:exp, x, n}, v), do: simplify({:mul, {:exp, x, {:add, n, {:const, -1}}}, n})
  def deriv({:ln, x}, x), do: simplify({:exp, x, {:const, -1}})
  def deriv({:sin, x}, x), do: {:sin, {:add, x, {:const, 90}}}


  def simplify(tuple) do
    temp = simp(tuple)
    if elem(temp, 0) == :const || temp == simp(temp) do
      temp
    else
      simplify(temp)
    end
  end

  def simp(tuple) do
    case elem(tuple, 0) do
      :add ->
        if elem(elem(tuple, 1), 1) == 0 do
          elem(tuple, 2)
        else
          if elem(elem(tuple, 2), 1) == 0 do
            elem(tuple, 1)
          else
        case elem(elem(tuple, 1), 0) do
          :const ->
            case elem(elem(tuple, 2), 0) do
              :const ->
                {:const, (elem(elem(tuple, 1), 1) + elem(elem(tuple, 2), 1))}
              :var ->
                tuple
              _ ->
                {:add, elem(tuple, 1), simplify(elem(tuple, 2))}
            end
          :var ->
            if (elem(elem(tuple, 2), 0) != :const && elem(elem(tuple, 2), 0) != :var) do
              {:add, elem(tuple, 1), simplify(elem(tuple, 2))}
            else
              tuple
            end
          _ ->
            if (elem(elem(tuple, 2), 0) != :const && elem(elem(tuple, 2), 0) != :var) do
              {:add, simplify(elem(tuple, 1)), simplify(elem(tuple, 2))}
            else
              {:add, simplify(elem(tuple, 1)), elem(tuple, 2)}
            end
        end
      end
    end
      :mul ->
        if (elem(elem(tuple, 1), 1) == 0 || (elem(elem(tuple, 2), 1) == 0)) do
          {:const, 0}
        else
        case elem(elem(tuple, 1), 0) do
          :const ->
            case elem(elem(tuple, 2), 0) do
              :const ->
                {:const, (elem(elem(tuple, 1), 1) * elem(elem(tuple, 2), 1))}
              :var ->
                tuple
              _ ->
                {:mul, elem(tuple, 1), simplify(elem(tuple, 2))}
            end
          :var ->
            if (elem(elem(tuple, 2), 0) != :const && elem(elem(tuple, 2), 0) != :var) do
              {:mul, elem(tuple, 1), simplify(elem(tuple, 2))}
            else
              tuple
            end
          _ ->
            if (elem(elem(tuple, 2), 0) != :const && elem(elem(tuple, 2), 0) != :var) do
              {:mul, simplify(elem(tuple, 1)), simplify(elem(tuple, 2))}
            else
              {:mul, simplify(elem(tuple, 1)), elem(tuple, 2)}
            end
          end
        end
      :exp ->
        case elem(elem(tuple, 2), 1) do
          0 ->
            {:const, 1}
          1 ->
            elem(tuple, 1)
          _ ->
            {:exp, elem(tuple, 1), simplify(elem(tuple, 2))}
        end
      _ ->
        tuple
    end
  end
end
